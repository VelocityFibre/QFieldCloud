# Generated by Django 3.2.25 on 2024-03-23 13:19

import migrate_sql.operations
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0074_auto_20240314_1805"),
    ]

    operations = [
        migrate_sql.operations.AlterSQL(
            name="core_delta_geom_trigger_func",
            sql="\n            CREATE OR REPLACE FUNCTION core_delta_geom_trigger_func()\n            RETURNS trigger\n            AS\n            $$\n                DECLARE\n                    delta_srid int;\n                    old_geom_wkt text;\n                    new_geom_wkt text;\n                BEGIN\n                    SELECT CASE\n                        WHEN jsonb_extract_path_text(NEW.content, 'localLayerCrs') ~ '^EPSG:\\d{1,10}$'\n                        THEN\n                            REGEXP_REPLACE(jsonb_extract_path_text(NEW.content, 'localLayerCrs'), '\\D*', '', 'g')::int\n                        ELSE\n                            NULL\n                        END INTO delta_srid;\n\n                    old_geom_wkt := NULLIF( TRIM( jsonb_extract_path_text(NEW.content, 'old', 'geometry') ), '');\n                    new_geom_wkt := NULLIF( TRIM( jsonb_extract_path_text(NEW.content, 'new', 'geometry') ), '');\n\n                    IF delta_srid IS NOT NULL\n                        AND EXISTS(\n                            SELECT *\n                            FROM spatial_ref_sys\n                            WHERE auth_name = 'EPSG'\n                                AND auth_srid = delta_srid\n                        )\n                    THEN\n                        NEW.old_geom := ST_Transform( ST_SetSRID( ST_Force2D( ST_GeomFromText( REPLACE( old_geom_wkt, 'nan', '0' ) ) ), delta_srid ), 4326 );\n                        NEW.new_geom := ST_Transform( ST_SetSRID( ST_Force2D( ST_GeomFromText( REPLACE( new_geom_wkt, 'nan', '0' ) ) ), delta_srid ), 4326 );\n                    ELSE\n                        NEW.old_geom := NULL;\n                        NEW.new_geom := NULL;\n                    END IF;\n\n                    IF ST_GeometryType(NEW.old_geom) IN ('ST_CircularString', 'ST_CompoundCurve', 'ST_CurvePolygon', 'ST_MultiCurve', 'ST_MultiSurface')\n                    THEN\n                        NEW.old_geom := ST_CurveToLine(NEW.old_geom);\n                    END IF;\n\n                    IF ST_GeometryType(NEW.new_geom) IN ('ST_CircularString', 'ST_CompoundCurve', 'ST_CurvePolygon', 'ST_MultiCurve', 'ST_MultiSurface')\n                    THEN\n                        NEW.new_geom := ST_CurveToLine(NEW.new_geom);\n                    END IF;\n\n                    RETURN NEW;\n                END;\n            $$\n            LANGUAGE PLPGSQL\n        ",
            reverse_sql="\n            CREATE OR REPLACE FUNCTION core_delta_geom_trigger_func()\n            RETURNS trigger\n            AS\n            $$\n                DECLARE\n                    srid int;\n                BEGIN\n                    SELECT CASE\n                        WHEN jsonb_extract_path_text(NEW.content, 'localLayerCrs') ~ '^EPSG:\\d{1,10}$'\n                        THEN\n                            REGEXP_REPLACE(jsonb_extract_path_text(NEW.content, 'localLayerCrs'), '\\D*', '', 'g')::int\n                        ELSE\n                            NULL\n                        END INTO srid;\n                    NEW.old_geom := ST_Transform( ST_SetSRID( ST_Force2D( ST_GeomFromText( REPLACE( jsonb_extract_path_text(NEW.content, 'old', 'geometry'), 'nan', '0' ) ) ), srid ), 4326 );\n                    NEW.new_geom := ST_Transform( ST_SetSRID( ST_Force2D( ST_GeomFromText( REPLACE( jsonb_extract_path_text(NEW.content, 'new', 'geometry'), 'nan', '0' ) ) ), srid ), 4326 );\n\n                    IF ST_GeometryType(NEW.old_geom) IN ('ST_CircularString', 'ST_CompoundCurve', 'ST_CurvePolygon', 'ST_MultiCurve', 'ST_MultiSurface')\n                    THEN\n                        NEW.old_geom := ST_CurveToLine(NEW.old_geom);\n                    END IF;\n\n                    IF ST_GeometryType(NEW.new_geom) IN ('ST_CircularString', 'ST_CompoundCurve', 'ST_CurvePolygon', 'ST_MultiCurve', 'ST_MultiSurface')\n                    THEN\n                        NEW.new_geom := ST_CurveToLine(NEW.new_geom);\n                    END IF;\n\n                    RETURN NEW;\n                END;\n            $$\n            LANGUAGE PLPGSQL\n        ",
        ),
    ]
