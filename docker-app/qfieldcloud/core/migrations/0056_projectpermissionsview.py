# Generated by Django 3.2.13 on 2022-05-22 10:08

import migrate_sql.operations
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0055_auto_20220204_1654"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProjectRolesView",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("manager", "Manager"),
                            ("editor", "Editor"),
                            ("reporter", "Reporter"),
                            ("reader", "Reader"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "origin",
                    models.CharField(
                        choices=[
                            ("project_owner", "Project owner"),
                            ("organization_owner", "Organization owner"),
                            ("organization_admin", "Organization admin"),
                            ("collaborator", "Collaborator"),
                            ("team_member", "Team member"),
                            ("public", "Public"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "is_valid",
                    models.BooleanField(),
                ),
            ],
            options={
                "db_table": "projects_with_roles_vw",
                "managed": False,
            },
        ),
        migrate_sql.operations.CreateSQL(
            name="projects_with_roles_vw_seq",
            sql="\n            CREATE SEQUENCE IF NOT EXISTS projects_with_roles_vw_seq CACHE 5000 CYCLE\n        ",
            reverse_sql="\n            DROP SEQUENCE IF EXISTS projects_with_roles_vw_seq\n        ",
        ),
        migrate_sql.operations.CreateSQL(
            name="projects_with_roles_vw",
            sql='\n            CREATE OR REPLACE VIEW projects_with_roles_vw AS\n\n            WITH project_owner AS (\n                SELECT\n                    1 AS rank,\n                    P1."id" AS "project_id",\n                    P1."owner_id" AS "user_id",\n                    \'admin\' AS "name",\n                    \'project_owner\' AS "origin"\n                FROM\n                    "core_project" P1\n                    INNER JOIN "core_user" U1 ON (P1."owner_id" = U1."id")\n                WHERE\n                    U1."user_type" = 1\n            ),\n            organization_owner AS (\n                SELECT\n                    2 AS rank,\n                    P1."id" AS "project_id",\n                    O1."organization_owner_id" AS "user_id",\n                    \'admin\' AS "name",\n                    \'organization_owner\' AS "origin"\n                FROM\n                    "core_organization" O1\n                    INNER JOIN "core_project" P1 ON (P1."owner_id" = O1."user_ptr_id")\n            ),\n            organization_admin AS (\n                SELECT\n                    3 AS rank,\n                    P1."id" AS "project_id",\n                    OM1."member_id" AS "user_id",\n                    \'admin\' AS "name",\n                    \'organization_admin\' AS "origin"\n                FROM\n                    "core_organizationmember" OM1\n                    INNER JOIN "core_project" P1 ON (P1."owner_id" = OM1."organization_id")\n                WHERE\n                    (\n                        OM1."role" = \'admin\'\n                    )\n            ),\n            project_collaborator AS (\n                SELECT\n                    4 AS rank,\n                    C1."project_id",\n                    C1."collaborator_id" AS "user_id",\n                    C1."role" AS "name",\n                    \'collaborator\' AS "origin"\n                FROM\n                    "core_projectcollaborator" C1\n                    INNER JOIN "core_project" P1 ON (P1."id" = C1."project_id")\n                    INNER JOIN "core_user" U1 ON (P1."owner_id" = U1."id")\n            ),\n            project_collaborator_team AS (\n                SELECT\n                    5 AS rank,\n                    C1."project_id",\n                    TM1."member_id" AS "user_id",\n                    C1."role" AS "name",\n                    \'team_member\' AS "origin"\n                FROM\n                    "core_projectcollaborator" C1\n                    INNER JOIN "core_user" U1 ON (C1."collaborator_id" = U1."id")\n                    INNER JOIN "core_team" T1 ON (U1."id" = T1."user_ptr_id")\n                    INNER JOIN "core_teammember" TM1 ON (T1."user_ptr_id" = TM1."team_id")\n                    INNER JOIN "core_project" P1 ON (P1."id" = C1."project_id")\n            ),\n            public_project AS (\n                SELECT\n                    6 AS rank,\n                    P1."id" AS "project_id",\n                    U1."id" AS "user_id",\n                    \'reader\' AS "name",\n                    \'public\' AS "origin"\n                FROM\n                    "core_project" P1\n                    CROSS JOIN "core_user" U1\n                WHERE\n                    is_public = TRUE\n            )\n            SELECT DISTINCT ON(project_id, user_id)\n                nextval(\'projects_with_roles_vw_seq\') id,\n                R1.*\n            FROM (\n                SELECT * FROM project_owner\n                UNION\n                SELECT * FROM organization_owner\n                UNION\n                SELECT * FROM organization_admin\n                UNION\n                SELECT * FROM project_collaborator\n                UNION\n                SELECT * FROM project_collaborator_team\n                UNION\n                SELECT * FROM public_project\n            ) R1\n            ORDER BY project_id, user_id, rank\n        ',
            reverse_sql="\n            DROP VIEW projects_with_roles_vw;\n        ",
        ),
        migrations.CreateModel(
            name="OrganizationRolesView",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[("admin", "Admin"), ("member", "Member")],
                        max_length=100,
                    ),
                ),
                (
                    "origin",
                    models.CharField(
                        choices=[
                            ("organization_owner", "Organization owner"),
                            ("organization_member", "Organization member"),
                        ],
                        max_length=100,
                    ),
                ),
                ("is_public", models.BooleanField()),
            ],
            options={
                "db_table": "organizations_with_roles_vw",
                "managed": False,
            },
        ),
        migrate_sql.operations.CreateSQL(
            name="organizations_with_roles_vw_seq",
            sql="\n            CREATE SEQUENCE IF NOT EXISTS organizations_with_roles_vw_seq CACHE 5000 CYCLE\n        ",
            reverse_sql="\n            DROP SEQUENCE IF EXISTS organizations_with_roles_vw_seq\n        ",
        ),
        migrate_sql.operations.CreateSQL(
            name="organizations_with_roles_vw",
            sql='\n            CREATE OR REPLACE VIEW organizations_with_roles_vw AS\n            WITH organization_owner AS (\n                SELECT\n                    1 AS rank,\n                    ORG1."user_ptr_id" AS "organization_id",\n                    ORG1."organization_owner_id" AS "user_id",\n                    \'admin\' AS "name",\n                    \'organization_owner\' AS "origin",\n                    TRUE AS "is_public"\n                FROM\n                    "core_organization" ORG1\n            ),\n            organization_member AS (\n                SELECT\n                    2 AS rank,\n                    M1."organization_id" AS "organization_id",\n                    M1."member_id" AS "user_id",\n                    M1.role AS "name",\n                    \'organization_member\' AS "origin",\n                    M1."is_public" AS "is_public"\n                FROM\n                    "core_organizationmember" M1\n            )\n            SELECT DISTINCT ON(organization_id, user_id)\n                nextval(\'organizations_with_roles_vw_seq\') id,\n                R1.*\n            FROM (\n                SELECT * FROM organization_owner\n                UNION\n                SELECT * FROM organization_member\n            ) R1\n            ORDER BY organization_id, user_id, rank\n        ',
            reverse_sql='\n            DROP VIEW IF EXISTS "organizations_with_roles_vw";\n        ',
        ),
    ]
