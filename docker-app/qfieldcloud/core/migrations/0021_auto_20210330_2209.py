# Generated by Django 2.2.19 on 2021-03-30 22:09

from django.db import migrations, models
from django.db.models.aggregates import Count


class Migration(migrations.Migration):
    def forwards_func(apps, schema_editor):
        ProjectCollaborator = apps.get_model("core", "ProjectCollaborator")

        duplicated_collaborators_data = (
            ProjectCollaborator.objects.values("project", "collaborator", "role")
            .annotate(c=Count("id"))
            .filter(c__gt=1)
        )

        # this is catching only the very simple case of multiple collaborators that are also project owners
        # but NOT cases when the collaborator:
        # 1) is the organization owner of the project owner of type organization
        # 2) is the organization admin of the project owner of type organization
        for collaborators_data in duplicated_collaborators_data:
            queryset = ProjectCollaborator.objects.filter(
                project=collaborators_data["project"],
                collaborator=collaborators_data["collaborator"],
            ).order_by("role")

            queryset.exclude(pk=queryset.first().pk).delete()
            queryset.save()

        for project_collaborator in ProjectCollaborator.objects.all():
            collaborator = project_collaborator.collaborator
            project = project_collaborator.project

            if collaborator == project.owner:
                project_collaborator.delete()

    dependencies = [
        ("core", "0020_auto_20210321_1749"),
    ]

    operations = [
        migrations.RunPython(forwards_func, migrations.RunPython.noop),
        migrations.AddConstraint(
            model_name="projectcollaborator",
            constraint=models.UniqueConstraint(
                fields=("project", "collaborator"),
                name="projectcollaborator_project_collaborator_uniq",
            ),
        ),
    ]
